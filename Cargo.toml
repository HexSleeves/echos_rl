[package]
publish = false
version = "0.1.0"
edition = "2024"
name    = "echos_in_the_dark"
authors = ["Jacob L <lecoqjacob@gmail.com>"]
exclude = ["dist", "build", "assets", "credits"]

[workspace]
resolver = "2"
members  = ["crates/*"]

[workspace.dependencies]
### Internal crates ###
brtk         = { path = "crates/brtk" }
echos_assets = { path = "crates/echos_assets" }

### BEVY ###
bevy = { version = "0.16.1", default-features = false, features = [] }
bevy_asset_loader = { version = "0.23.0", features = [
  "2d",
  "standard_dynamic_assets",
  "progress_tracking",
] }
bevy_common_assets = { version = "0.13.0", features = ["ron"] }
bevy_ecs_tilemap = { version = "0.16", features = ["atlas"] }
bevy_kira_audio = { version = "0.23.0", features = ["android_shared_stdcxx"] }
big-brain = { git = "https://github.com/zkat/big-brain", branch = "main" }
iyes_progress = { version = "0.14.0" }
leafwing-input-manager = { version = "0.17", features = ["timing"] }

### Error handling ###
anyhow    = { version = "1" } # A library for convenient error handling in Rust.
thiserror = { version = "2" } # This library provides a convenient derive macro for the standard library's std::error::Error trait.

### Randomness ###
fastrand   = "2.0"                 # A fast random number generator
rand       = { version = "0.9" }   # Random number generators and other randomness functionality.
rand_distr = { version = "0.5.1" } # Random number distributions.

### Serialization ###
ron = "0.10" # Rusty Object Notation
serde = { version = "1", features = [
  "derive",
  "rc",
  "alloc",
] } # A generic serialization/deserialization framework
toml = "0.8.23" # A TOML-formatted file and stream encoder/decoder.

### Utilities ###
bitvec      = { version = "1" }                         # A vector of bits.
once_cell   = { version = "1" }                         # A thread-safe once-cell implementation.
regex       = "1.0"                                     # An implementation of regular expressions for Rust.
chrono      = { version = "0.4", features = ["serde"] } # Date and time library.
parking_lot = { version = "0.12.4" }

### Logging ###
# Compile low-severity logs out of native builds for performance.
log = { version = "0.4", features = [
  "max_level_debug",
  "release_max_level_warn",
] }
# Compile low-severity logs out of web builds for performance.
tracing = { version = "0.1", features = [
  "max_level_debug",
  "release_max_level_warn",
] }
tracing-subscriber = { version = "0.3", features = ["env-filter", "json"] }
tracing-appender = { version = "0.2" }

### Platform dependencies ###
winit = { version = "0.30", default-features = false }
image = { version = "0.25", default-features = false }
# keep the following in sync with Bevy's dependencies

[features]
default = [
  # Default to a native dev build.
  "dev_native",
]
dev = [
  # Improve compile times for dev builds by linking Bevy as a dynamic library.
  "bevy/dynamic_linking",
  "bevy/bevy_dev_tools",
  "bevy/bevy_ui_debug",
]
dev_native = [
  "dev",
  # Enable asset hot reloading for native dev builds.
  "bevy/file_watcher",
  # Enable embedded asset hot reloading for native dev builds.
  "bevy/embedded_watcher",
]

# Parallelism
parallel = ["rayon"]

# configuration for debugging information
debug         = ["bevy-inspector-egui", "debug-graph"]
debug-logging = ["tracing-subscriber", "tracing-appender"]
debug-trace   = ["debug", "trace"]

# Debugging
debug-graph = ["bevy_mod_debugdump"]

# Tracing
trace              = ["bevy/trace"]
trace_chrome       = ["bevy/trace_chrome"]
trace_tracy        = ["bevy/trace_tracy"]
trace_tracy_memory = ["bevy/trace_tracy_memory"]

[dependencies]
brtk         = { workspace = true }
echos_assets = { workspace = true }

bevy = { workspace = true, default-features = false, features = [
  "animation",
  "bevy_asset",
  "bevy_color",
  "bevy_core_pipeline",
  "bevy_gilrs",
  "bevy_gizmos",
  "bevy_gltf",
  "bevy_log",
  "bevy_mesh_picking_backend",
  "bevy_pbr",
  "bevy_picking",
  "bevy_render",
  "bevy_scene",
  "bevy_sprite_picking_backend",
  "bevy_sprite",
  "bevy_state",
  "bevy_text",
  "bevy_ui_picking_backend",
  "bevy_ui",
  "bevy_window",
  "bevy_winit",
  "custom_cursor",
  "default_font",
  "hdr",
  "multi_threaded",
  "png",
  "smaa_luts",
  "sysinfo_plugin",
  "tonemapping_luts",
  # "wayland",
  "webgl2",
  "x11",
] }
bevy_asset_loader = { workspace = true }
bevy_common_assets = { workspace = true }
bevy_ecs_tilemap = { workspace = true }
bevy_kira_audio = { workspace = true }
big-brain = { workspace = true }
iyes_progress = { workspace = true }
leafwing-input-manager = { workspace = true }

# Error handling
anyhow    = { workspace = true }
thiserror = { workspace = true }

### Randomness ###
fastrand   = { workspace = true }
rand       = { workspace = true }
rand_distr = { workspace = true }

### Serialization ###
ron   = { workspace = true }
serde = { workspace = true }
toml  = { workspace = true }

### Utilities ###
bitvec      = { workspace = true }
chrono      = { workspace = true }
once_cell   = { workspace = true }
parking_lot = { workspace = true }
regex       = { workspace = true }

### Logging ###
log                = { workspace = true }
tracing            = { workspace = true }
tracing-subscriber = { workspace = true, optional = true }
tracing-appender   = { workspace = true, optional = true }

### Platform dependencies ###
winit = { workspace = true }
image = { workspace = true }

######################################
#########       Debug
######################################
bevy-inspector-egui = { version = "0.31", optional = true }
bevy_mod_debugdump  = { version = "0.13", optional = true }

######################################
#########       Parallel
######################################
rayon = { version = "1", optional = true }

[build-dependencies]
embed-resource = "3.0.3"
# embed-resource = "1"

########################
# PROFILES #
########################

# Enable a small amount of optimization in the dev profile.
[profile.dev]
opt-level = 1

# Enable a large amount of optimization in the dev profile for dependencies.
[profile.dev.package."*"]
opt-level = 3

# Remove expensive debug assertions due to <https://github.com/bevyengine/bevy/issues/14291>
[profile.dev.package.wgpu-types]
debug-assertions = false

# Optimize for build time in CI.
[profile.ci]
inherits      = "dev"
opt-level     = 0
debug         = "line-tables-only"
codegen-units = 4

# This is used by trunk as it doesn't support custom profiles: https://github.com/trunk-rs/trunk/issues/605
# xbuild also uses this profile for building android AABs because I couldn't find a configuration for it
[profile.release]
opt-level = "s"
lto       = true
# Compile the entire crate as one unit.
# Slows compile times, marginal improvements.
codegen-units = 1
strip         = true

# Profile for distribution
[profile.dist]
inherits      = "release"
opt-level     = 3
lto           = true
codegen-units = 1
strip         = true

# This profile will be used by `bevy run web` automatically.
[profile.web-release]
# Default to release profile values.
inherits = "release"
# Optimize with size in mind (also try "z", sometimes it is better).
# Slightly slows compile times, great improvements to file size and runtime performance.
opt-level = "s"
# Strip all debugging information from the binary to slightly reduce file size.
strip = "debuginfo"

[profile.ci.package."*"]
opt-level = 0

########################
# BEVY CLI #
########################

# You can configure the warning levels of Bevy lints here. For a list of all lints, see:
# <https://thebevyflock.github.io/bevy_cli/bevy_lint/lints/>
[package.metadata.bevy_lint]
# panicking_methods = "deny"
pedantic = "warn"

[package.metadata.bevy_cli.release]
# Disable debug functionality in release builds.
default-features = false

[package.metadata.bevy_cli.web]
# Disable native features for web builds.
default-features = false

[package.metadata.bevy_cli.web.dev]
features = ["dev"]

########################
# LINTS #
########################

[lints.rust]
# Mark `bevy_lint` as a valid `cfg`, as it is set when the Bevy linter runs.
unexpected_cfgs = { level = "warn", check-cfg = ["cfg(bevy_lint)"] }

[lints.clippy]
# Bevy supplies arguments to systems via dependency injection, so it's natural for systems to
# request more than 7 arguments, which would undesirably trigger this lint.
too_many_arguments = "allow"
# Queries may access many components, which would undesirably trigger this lint.
type_complexity = "allow"
# Make sure macros use their standard braces, such as `[]` for `bevy_ecs::children!`.
nonstandard_macro_braces = "warn"
