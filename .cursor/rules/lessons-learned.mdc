---
description:
globs:
alwaysApply: false
---
# Project Intelligence & Lessons Learned

## Rust Development Workflow
- Always run `cargo clippy` instead of basic `cargo check` for comprehensive analysis
- Run `cargo fmt` after making core changes to maintain consistent formatting
- Use `cargo check` or `cargo build` to assess build status before making changes
- The cargo binary is located at `~/.local/share/cargo` - ensure this path is used

## Bevy Game Engine Patterns
- Use ECS architecture properly: small focused components, specific system queries
- Prefer events over direct resource mutation for better system decoupling
- Use `With<T>` and `Without<T>` filters to optimize queries and reduce unnecessary iterations
- Implement proper plugin architecture to organize game systems by feature
- Use state management for different game phases (Menu, Playing, Paused, etc.)

## Project Structure Insights
- The project is being refactored into multiple Rust crates for better organization
- Gradual migration from monolithic src directory to separate crates while preserving functionality
- Use plugin-based architecture to keep systems organized and maintainable

## Performance Considerations
- Profile in `--release` mode for accurate performance measurements
- Use object pooling for frequently spawned/despawned entities
- Batch similar operations together for better cache locality
- Prefer `&T` over `&mut T` in queries when possible to allow parallel execution

## Development Tools
- Use `bevy-inspector-egui` for runtime debugging and entity inspection
- Enable debug rendering with gizmos for collision detection and spatial debugging
- Use tracy or puffin for performance profiling
- Implement FPS monitoring for performance tracking during development
